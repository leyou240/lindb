basePath: /api/v1
definitions:
  models.ExecuteParam:
    properties:
      db:
        type: string
      sql:
        type: string
    required:
    - sql
    type: object
  models.LeafNodeStats:
    properties:
      end:
        type: integer
      netPayload:
        type: integer
      stages:
        items:
          $ref: '#/definitions/models.StageStats'
        type: array
      start:
        type: integer
      totalCost:
        type: integer
    type: object
  models.Metadata:
    properties:
      type:
        type: string
      values: {}
    type: object
  models.OperatorStats:
    properties:
      cost:
        type: integer
      end:
        type: integer
      errMsg:
        type: string
      identifier:
        type: string
      start:
        type: integer
      stats: {}
    type: object
  models.ProxyParam:
    properties:
      path:
        type: string
      target:
        type: string
    required:
    - path
    - target
    type: object
  models.QueryStats:
    properties:
      brokerNodes:
        additionalProperties:
          $ref: '#/definitions/models.QueryStats'
        type: object
      end:
        type: integer
      expressCost:
        type: integer
      expressEnd:
        type: integer
      expressStart:
        type: integer
      leafNodes:
        additionalProperties:
          $ref: '#/definitions/models.LeafNodeStats'
        type: object
      netPayload:
        type: integer
      planCost:
        type: integer
      planEnd:
        type: integer
      planStart:
        type: integer
      root:
        type: string
      start:
        type: integer
      totalCost:
        description: total query cost
        type: integer
      waitCost:
        description: wait intermediate or leaf response duration
        type: integer
      waitEnd:
        type: integer
      waitStart:
        type: integer
    type: object
  models.ResultSet:
    properties:
      endTime:
        type: integer
      fields:
        items:
          type: string
        type: array
      groupBy:
        items:
          type: string
        type: array
      interval:
        type: integer
      metricName:
        type: string
      series:
        items:
          $ref: '#/definitions/models.Series'
        type: array
      startTime:
        type: integer
      stats:
        $ref: '#/definitions/models.QueryStats'
    type: object
  models.Series:
    properties:
      fields:
        additionalProperties:
          additionalProperties:
            type: number
          type: object
        type: object
      tags:
        additionalProperties:
          type: string
        type: object
    type: object
  models.StageStats:
    properties:
      async:
        type: boolean
      children:
        items:
          $ref: '#/definitions/models.StageStats'
        type: array
      cost:
        type: integer
      end:
        type: integer
      errMsg:
        type: string
      identifier:
        type: string
      operators:
        items:
          $ref: '#/definitions/models.OperatorStats'
        type: array
      start:
        type: integer
      state:
        type: string
    type: object
host: http://localhost:9000
info:
  contact:
    name: API Support
    url: https://lindb.io
  description: LinDB Open API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: LinDB Open API
  version: "1.0"
paths:
  /config:
    get:
      consumes:
      - application/json
      description: return current node's configuration.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
      summary: current node's configuration
      tags:
      - State
  /exec:
    get:
      consumes:
      - application/json
      description: |-
        Execute lin query language with rate limit, then return different response based on execution statement.
        1. metric data/metadata query statement;
        2. cluster metadata/state query statement;
        3. database/storage management statement;
      parameters:
      - description: param data
        in: body
        name: param
        schema:
          $ref: '#/definitions/models.ExecuteParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Metadata'
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal error
          schema:
            type: string
      summary: execute lin query language
      tags:
      - LinQL
    post:
      consumes:
      - application/json
      description: |-
        Execute lin query language with rate limit, then return different response based on execution statement.
        1. metric data/metadata query statement;
        2. cluster metadata/state query statement;
        3. database/storage management statement;
      parameters:
      - description: param data
        in: body
        name: param
        schema:
          $ref: '#/definitions/models.ExecuteParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Metadata'
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal error
          schema:
            type: string
      summary: execute lin query language
      tags:
      - LinQL
    put:
      consumes:
      - application/json
      description: |-
        Execute lin query language with rate limit, then return different response based on execution statement.
        1. metric data/metadata query statement;
        2. cluster metadata/state query statement;
        3. database/storage management statement;
      parameters:
      - description: param data
        in: body
        name: param
        schema:
          $ref: '#/definitions/models.ExecuteParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Metadata'
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal error
          schema:
            type: string
      summary: execute lin query language
      tags:
      - LinQL
  /log/list:
    get:
      consumes:
      - application/json
      description: return all log files in log dir.
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal error
          schema:
            type: string
      summary: list log files
      tags:
      - State
  /log/view:
    get:
      consumes:
      - application/json
      description: return last N lines in log file.
      produces:
      - text/plain
      responses:
        "200":
          description: OK
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal error
          schema:
            type: string
      summary: tail log file
      tags:
      - State
  /proxy:
    get:
      consumes:
      - application/json
      description: Forward request to target server by given target ip and path.
      parameters:
      - description: param data
        in: body
        name: param
        schema:
          $ref: '#/definitions/models.ProxyParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: object
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: internal error
          schema:
            type: string
      summary: reverse proxy
      tags:
      - State
  /write:
    post:
      consumes:
      - application/flatbuffer
      - application/protobuf
      - application/influx
      description: |-
        receive metric data, then parse the data based on content type(flat buffer/proto buffer/influx).
        write data via database channel, support content-type as below:
        1. application/flatbuffer
        2. application/protobuf
        3. application/influx
      parameters:
      - description: database name
        in: query
        name: db
        required: true
        type: string
      - description: 'namespace, default value: default-ns'
        in: query
        name: ns
        type: string
      - description: metric data
        in: body
        name: string
        schema:
          type: string
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "500":
          description: internal error
          schema:
            type: string
      summary: write metric data
      tags:
      - Write
    put:
      consumes:
      - application/flatbuffer
      - application/protobuf
      - application/influx
      description: |-
        receive metric data, then parse the data based on content type(flat buffer/proto buffer/influx).
        write data via database channel, support content-type as below:
        1. application/flatbuffer
        2. application/protobuf
        3. application/influx
      parameters:
      - description: database name
        in: query
        name: db
        required: true
        type: string
      - description: 'namespace, default value: default-ns'
        in: query
        name: ns
        type: string
      - description: metric data
        in: body
        name: string
        schema:
          type: string
      produces:
      - text/plain
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "500":
          description: internal error
          schema:
            type: string
      summary: write metric data
      tags:
      - Write
schemes:
- http
swagger: "2.0"
